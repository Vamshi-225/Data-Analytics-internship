--droping the database Ecommerce
Drop database if exists Ecommerce;


--creating the database Ecommerce
Create Database Ecommerce;


--droping the table customers
DROP TABLE CUSTOMERS;


--creating the table Orders
create table Customers(
customer_id INT PRIMARY KEY,
name VARCHAR(100),
email VARCHAR(100),
country VARCHAR(100),
signup_date DATE
);

--Retriving the data from customers Table
SELECT * FROM Customers;

--droping the table orders
Drop Table orders;

--creating the table Orders
CREATE TABLE ORDERS(
order_id INT PRIMARY KEY,
customer_id INT REFERENCES CUSTOMERS(CUSTOMER_ID),
product_id INT,
order_date DATE,
quantity INT,
total_amount DECIMAL(10,2)
);


--Retriving the data from orders Table
select * From orders;

--droping the table products
Drop Table products;

--createing the table products
create table products(
product_id INT,
product_name VARCHAR(100),
category VARCHAR(100),
price DECIMAL(10,2)
);

--Retriving the data from products Table
SELECT * FROM PRODUCTS;

--droping the table payments
Drop Table payments;

--createing the table payments
CREATE TABLE PAYMENTS(
payment_id INT,
order_id INT REFERENCES ORDERS(ORDER_ID),
payment_method VARCHAR(100),
payment_date DATE,
amount DECIMAL(10,2)
);

--Retriving the data from payments Table
select *From payments;


--a.Use SELECT, WHERE, ORDER BY, GROUP BY
select * From customers;

select * From products
where price>500;

select payment_method,sum(amount)
from payments
group by payment_method
order by sum(amount) desc;


--b.Use JOINS (INNER, LEFT, RIGHT)

--Inner join
select c.name,o.total_amount
from customers c
inner join
orders o
on
c.customer_id=o.customer_id
order by total_amount;

--left join
select (o.customer_id),sum(p.amount)
from orders o
left join
payments p
on
o.order_id=p.order_id
group by customer_id
order by customer_id,sum(p.amount);

--Right Join
select o.order_date,p.payment_date
from orders o
right join
payments p
on
o.order_id=p.order_id
where p.amount>1000;

--c.Write subqueries
select max(total_amount) as second_highest_amount
from orders
where total_amount<(
select max(total_amount)
from orders
);

-- d.Use aggregate functions (SUM, AVG)
--sum
select category,sum(price)
from products
group by category
order by sum(price) desc;

--average
select product_name,avg(price)
from products
group by product_name
order by avg(price);

--e.Create views for analysis
create or replace view customer_orders as
select 
c.customer_id,
c.name,
o.order_id,
o.order_date,
o.total_amount
from customers c
inner join 
orders o
on
c.customer_id = o.customer_id
order by total_amount;



--Retriving the data from created view
select * From customer_orders;


--f.Optimize queries with indexes
CREATE INDEX idx_orders_customer_id
ON orders(customer_id);


--droping the index
drop index idx_orders_customer_id
